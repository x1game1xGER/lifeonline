var dzMap = new function() {
    var MapThis = this;
    MapThis.buildings = [];
    MapThis.markers = [];
    MapThis.loadedSets = {};
    MapThis.shownSets = {};
    MapThis.mapId = 0;
    MapThis.mapType = -1;
    MapThis.map = null;
    MapThis.canvas = null;
    MapThis.projection = null;
    var f = !1,
        k = !1,
        u = [];
    MapThis.markerVisibility = !1;
    MapThis.onLoaded = function() {
        if (f) {
            k = !1;
            var Buildings = MapThis.buildings,
                Markers = MapThis.markers,
                MarkerForLoop;
            MapThis.canvas.setAutoRedraw(!1);
            var BuildingsLenght = Buildings.length;
            for (MarkerForLoop = 0; MarkerForLoop < BuildingsLenght; ++MarkerForLoop)
				dzMarkers.addBuilding(
					Buildings[MarkerForLoop].id,
					Buildings[MarkerForLoop].x,
					Buildings[MarkerForLoop].y,
					Buildings[MarkerForLoop].Type,
					Buildings[MarkerForLoop].s,
					Buildings[MarkerForLoop].Icon
				);
            Buildings = Markers.length;
            for (MarkerForLoop = 0; MarkerForLoop < Buildings; ++MarkerForLoop)
				dzMarkers.addMarker(
					0,
					Markers[MarkerForLoop].id,
					Markers[MarkerForLoop].x,
					Markers[MarkerForLoop].y,
					Markers[MarkerForLoop].Type,
					Markers[MarkerForLoop].i,
					Markers[MarkerForLoop].n,
					Markers[MarkerForLoop].Icon
				);
            MapThis.canvas.setAutoRedraw(!0);
            MapThis.canvas.redraw();
        }
		else
		{
			k = !0;
		}
    };

    MapThis.init = function(Init) {
        MapThis.mapId = Init;
        var d = 0, e;
        if (1 < dayzMapTypes.length) {
            (Init = Datastore.read("MapType" + Init)) && dayzMapTypes[Init] && (d = Init);
            e = $("#mapType");
            var c = $("#mapTypeButton");
            Init = $("#mapType ul");
            e.show();
            c.text(dayzMapNames[d]);
            for (e = 0; e < dayzMapTypes.length; ++e) {
                var g = $("<a/>", {
                    href: "javascript:;",
                    text: dayzMapNames[e],
                    "data-id": e,
                    click: function() {
                        var Init = $(this).attr("data-id");
                        c.text(dayzMapNames[Init]);
                        a.setType(Init)
                    }
                });
                Init.append($("<li/>").append(g))
            }
        }
        MapThis.setType(d);
        dzMarkers.init();
        f = !0;
        if (k) MapThis.onLoaded();
        for (e = 0; e <
            u.length; ++e) v.apply(MapThis, u[e]);
        u = [];
        if (d = Datastore.read("LoadedSets" + MapThis.mapId)) {
            var d = JSON.parse(d),
                h;
            for (h in d) MapThis.requestSet(h, d[h])
        }
        h = "MarkerVis" + MapThis.mapId;
        MapThis.markerVisibility = Datastore.read(h);
        MapThis.markerVisibility && (MapThis.markerVisibility = JSON.parse(MapThis.markerVisibility));
        d = $("#sidebarToggles");
        d.popover({
            placement: "left",
            trigger: "manual",
            html: !0,
            title: "<button class=\"close\" onclick=\"$('#sidebarToggles').popover('hide');\">&times;</button>Toggling markers",
            content: "You can toggle the loot markers!<br><br>Click the main part of each button to toggle all markers of that type, or click the dropdown arrow to toggle individual types."
        });
        Init = $("#mapCoords");
        Init.popover({
            placement: "top",
            trigger: "manual",
            html: !0,
            title: "<button class=\"close\" onclick=\"$('#mapCoords').popover('hide');\">&times;</button>Measuring distances",
            content: "You can measure the distance between two points!<br><br>Click any two points on the map to see exactly how far apart they are. To clear it, just click again."
        });
        if (void 0 === MapThis.markerVisibility) d.popover("show"), MapThis.markerVisibility = {}, Datastore.write(h, JSON.stringify(MapThis.markerVisibility));
        else {
            Datastore.read("MeasureTip") ||
                (Init.popover("show"), Datastore.write("MeasureTip", 1));
            for (var p in MapThis.markerVisibility) h = MapThis.markerVisibility[p], h.show || ((h.size ? $('input.iconToggle[data-type="' + h.type + '"][data-value="' + h.size + '"]') : $('input.iconToggle[data-type="' + h.type + '"]')).removeAttr("checked"), $("button.iconToggle").each(function() {
                var a = $(this),
                    Init = a.parent(),
                    Init = $("input.iconToggle:checked", Init);
                0 < Init.length && !MapThis.hasClass("active") ? MapThis.addClass("active") : 0 == Init.length && MapThis.hasClass("active") && MapThis.removeClass("active")
            }), dzMarkers.toggleMarkers(h.show,
                h.type, h.size))
        }
    };
	
    MapThis.updateSavedVisibility = function() {
        $("#sidebarToggles").popover("hide");
        MapThis.markerVisibility = {};
        $("input.iconToggle").each(function() {
            var b = $(this),
                d = b.attr("data-type"),
                e = b.attr("data-value"),
                b = b.is(":checked");
            MapThis.markerVisibility[d + (e ? "-" + e : "")] = {
                show: b,
                type: d,
                size: e
            }
        });
        Datastore.write("MarkerVis" + MapThis.mapId, JSON.stringify(a.markerVisibility))
    };
	
    MapThis.setType = function(b) {
        if (MapThis.mapType !== b) {
            MapThis.type = b;
            MapThis.projection = dayzProjections[b];
            var d = dayzMapTypes[b];
            if (MapThis.map) {
                var e = MapThis.map.getCenter();
                MapThis.map.removeLayer(MapThis.map.options.layers[0]);
                MapThis.map.addLayer(d.layers[0]);
                L.Util.setOptions(MapThis.map, d);
                MapThis.map.fire("viewreset", {
                    hard: !0
                });
                d.layers[0]._update();
                MapThis.canvas._update();
                MapThis.map.panTo(e)
            } else {
                for (var e = location.hash.substr(1).split(";"), c, f, k = 0; k < e.length; ++k)
                    if (null !== (c = /^(\d)\.(\d{3})\.(\d{3})$/.exec(e[k]))) {
                        d.zoom = parseInt(c[1], 10);
                    } else null !== (c = /^set=(\d+)$/.exec(e[k])) ? a.requestSet(c[1]) : null !== (c = /^item=(.+)$/.exec(e[k])) && (f = decodeURIComponent(c[1]));
                MapThis.map = L.map("map", d);
                MapThis.canvas = L.canvasLayer({
                    zIndex: 10
                }).addTo(MapThis.map);
            }
            Datastore.write("MapType" + MapThis.mapId, b)
        }
    };
};

function fromCoordToGps(a) {
    a = Math.abs(a);
    var f = (1E3 * a).toString();
    return f = .1 > a ? "000" : 1 > a ? "00" + f.substr(0, 1) : 10 > a ? "0" + f.substr(0, 2) : 100 > a ? f.substr(0, 3) : "999"
}

var dzMarkers = new function() {
        var a = this;
        a.markers = [];
        var f = null,
            k = null,
            u = !1;
        a.init = function() {
            f = dzMap.canvas;
            k = dzMap.map
        };
        a.addBuilding = function(b, c, e, d, n, m) {
            var l, h;
            if (a.markerTypes[d]) {
                l = a.markerTypes[d];
                var g = l.icon;
                if (l.sized) {
                    for (l = 0; 3 > l; ++l) n > a.sizeThresholds[l] && (h = a.sizeNames[l]);
                    g += "-" + h
                }
                if (a.markerIcons[g]) l = new a.markerIcons[g];
                else return console.log("Unhandled marker icon: " + g), !1
            } else return !1;
            var p = a.markerTypes[d].name,
                q = a.zIndex["default"];
            void 0 !== a.zIndex[h] ? q = a.zIndex[h] : void 0 !== a.zIndex[d] && (q = a.zIndex[d]);
            c = L.marker(L.latLng(c, e, !0), {
                icon: l,
                clickable: !0,
                title: p,
                zIndexOffset: q
            });
            c.info = {
                buildingId: b,
                building: m,
                type: d,
                size: n,
                sizeName: h
            };
            a.markerVisibility && a.markerVisibility[g] && !a.markerVisibility[g].show ? c.setVisible(!1) : u && !u[m] && c.setVisible(!1);
            f.addLayer(c);
            if (l instanceof L.DivIcon) k.on("viewreset", w, c), w.call(c);
            else c.on("click", v);
            a.markers.push(c);
            return c
        };
        a.addMarker =
            function(setId, markerId, e, d, type, m, name, building) {
                var g;
                if ("label" == type) name = name.replace(/(.+)\/\/(.+)$/, "$1<br><small>$2</small>"), g = L.divIcon({
                    iconSize: null,
                    className: "map-label " + building,
                    html: "<span>" + name + "</span>"
                });
                else {
                    if (!setId && "pump" == m) return;
                    if (a.markerIcons[m]) g = new a.markerIcons[m];
                    else return console.log("Unhandled marker icon: " + m), !1
                }
                var p = a.zIndex["default"];
                void 0 !== a.zIndex[type] && (p = a.zIndex[type]);
                e = L.marker(L.latLng(e, d, !0), {
                    icon: g,
                    clickable: setId ? !0 : !1,
                    title: "label" != type ? name : "",
                    zIndexOffset: p
                });
                L.stamp(e);
                e.info = {
                    setId: setId,
                    markerId: markerId,
                    building: building,
                    type: type,
                    name: name,
                    icon: m
                };
                f.addLayer(e);
                g instanceof L.DivIcon && (k.on("viewreset", w, e), w.call(e));
                if (b) e.on("click", v);
                else a.markerVisibility && a.markerVisibility[m] && !a.markerVisibility[m].show && e.setVisible(!1);
                a.markers.push(e);
                return e
            };
        var v = function() {
            $("#haus_info").load("js/info.php?id=" + this.info.building);
        };
        var w = function() {
            if (this._icon) {
                var a = k.getZoom(),
                    b = $(this._icon);
                b.hasClass("light") ? 4 > a ? b.css({
                        visibility: "hidden"
                    }) : b.css({
                        visibility: ""
                    }) :
                    b.is(".light, .medium, .heavy") || (3 > a ? b.css({
                        visibility: "hidden"
                    }) : b.css({
                        visibility: ""
                    }))
            }
        };
        a.toggleMarkers = function(b, c, e) {
            var d = a.markers.length,
                n = a.markers,
                m, l;
            f.setAutoRedraw(!1);
            if (e)
                for (m = 0; m < d; ++m) l = n[m], l.info.setId || l.info.type != c || l.info.sizeName == e && l.setVisible(b);
            else
                for (m = 0; m < d; ++m) l = n[m], l.info.setId || l.info.type != c || l.setVisible(b);
            f.setAutoRedraw(!0);
            f.redraw()
        };
        a.toggleSet = function(b) {
            var c = a.markers,
                e = c.length,
                d, n = !0;
            dzMap.loadedSets[b].hidden && (n = !1);
            dzMap.loadedSets[b].hidden =
                n;
            f.setAutoRedraw(!1);
            for (var m = 0; m < e; ++m) d = c[m], d.info.setId === b && (d.info.hidden = n, d.setVisible(!n));
            f.setAutoRedraw(!0);
            f.redraw()
        };
        a.limitBuildings = function(b) {
            var c = {},
                e = b.length,
                d;
            for (d = 0; d < e; ++d) c[b[d]] = !0;
            f.setAutoRedraw(!1);
            var e = a.markers,
                n = e.length;
            if (b)
                for (u = c, d = 0; d < n; ++d) b = e[d], b.info.buildingId && (c[b.info.building] ? b.info.hiddenBuilding = !1 : (b.info.hiddenBuilding = !0, b.setVisible(!1)));
            else
                for (u = !1, d = 0; d < n; ++d) b = e[d], b.info.buildingId && b.info.hiddenBuilding && (b.info.hiddenBuilding = !1,
                    b.setVisible(!0));
            f.setAutoRedraw(!0);
            f.redraw()
        };
        var t = !1,
            c = !1,
            g = {},
            p = [],
            q = [];
        a.editSet = function(c) {
            var e = dzMap.loadedSets[c];
            if (e && (1 == e.access || e[3] == dayzCurrentUser.id || 1 == dayzCurrentUser.access)) {
                t && y();
                t = c;
                $("#sidebar").addClass("editor-open");
                var e = a.markers,
                    r = e.length,
                    g;
                f.setAutoRedraw(!1);
                for (var n = 0; n < r; ++n) g = e[n], g.info.setId === c ? (g.info.editing = !0, g.off("click", v), g.on("click", d), g.on("dragend", b), g.setClickable(!0), g.setDraggable(!0), g.setVisible(!0)) : g.setVisible(!1);
                f.setAutoRedraw(!0);
                f.redraw()
            }
        };
        var y = function() {
                if (t && (!(0 < p.length || 0 < q.length || 0 < Object.keys(g).length) || confirm("You have unsaved changes to this set. Do you want to discard them?"))) {
                    t = !1;
                    g = {};
                    q = [];
                    p = [];
                    e();
                    $("#sidebar").removeClass("editor-open");
                    var c = a.markers,
                        h = c.length,
                        r;
                    f.setAutoRedraw(!1);
                    for (var k = 0; k < h; ++k) r = c[k], r.info.editing ? (r.setDraggable(!1), r.off("dragend", b), r.off("click", d), r.on("click", v), r.info.editing = !1, "label" == r.info.type && r.setClickable(!1)) : r.info.hidden || r.setVisible(!0);
                    f.setAutoRedraw(!0);
                    f.redraw()
                }
            },
            b = function() {
                var a = this._latlng,
                    b = g[this.markerId];
                void 0 === b ? g[this.info.markerId] = {
                    id: this.info.markerId,
                    lat: a.lat,
                    lng: a.lng,
                    icon: this.info.icon,
                    type: this.info.type,
                    name: this.info.name,
                    building: this.info.building
                } : (b.lat = a.lat, b.lng = a.lng);
                c && c.info.markerId && c.info.markerId == this.info.markerId && ($("#markerLatInput").val(a.lat), $("#markerLngInput").val(a.lng))
            },
            d = function() {
                c = this;
                var a = c._latlng;
                $("#markerNameInput").val(c.info.name);
                $("#markerTypeInput").val(c.info.type);
                $("#markerBuildingInput").val(c.info.building);
                $("#markerIconInput").val(c.info.icon);
                $("#markerLatInput").val(a.lat);
                $("#markerLngInput").val(a.lng)
            },
            e = function() {
                $("#markerLatInput").val("");
                $("#markerLngInput").val("");
                $("#markerNameInput").val("");
                $("#markerBuildingInput").val("")
            },
            B = function(a) {
                a && a.preventDefault();
                if (c && confirm("Are you sure you want to delete this marker?")) {
                    f.removeLayer(c);
                    if (0 < c.info.markerId) p.push(c.info.markerId);
                    else {
                        a = q.length;
                        for (var b = L.stamp(c), d = 0; d < a; ++d)
                            if (L.stamp(q[d]) == b) {
                                q.splice(d, 1);
                                break
                            }
                    }
                    c = !1;
                    e()
                }
            },
            C = function() {
                if (t) {
                    var a = {
                            set: t
                        },
                        b = Object.keys(g).length;
                    0 < b && (a.dirty = JSON.stringify(g));
                    0 < q.length && (a["new"] = JSON.stringify(q));
                    0 < p.length && (a.deleted = JSON.stringify(p));
                    0 == b && 0 == q.length && 0 == p.length ? alert("Nothing to save.") : $.ajax("/savemarkers", {
                        type: "POST",
                        data: a,
                        success: function(a, b, c) {
                            a.error ? alert("Error saving: " + a.error) : (alert("Markers saved!"), g = {}, q = [], p = [])
                        },
                        error: function(a, b, c) {
                            alert("Error saving: " + c)
                        }
                    })
                }
            },
            h = function() {
                dzMap.clearMeasuring();
                dzMap.map.off("click", dzMap.startMeasuring);
                dzMap.map.on("click", A)
            },
            A = function(e) {
                dzMap.map.off("click", A);
                dzMap.map.on("click", dzMap.startMeasuring);
                c = a.addMarker(t, 0, e.latlng.lat, e.latlng.lng, "", "hospital", "", "");
                c.setDraggable(!0);
                c.off("click", v);
                c.on("dragend", b);
                c.on("click", d);
                c.fire("click")
            };
        $(document).ready(function() {
            $("#markerSetsCreateForm").submit(function(a) {
                a.preventDefault();
                a = $("#markerSetsCreateName").val();
                var b = $("#markerSetsCreatePassword").val(),
                    c = $("#markerSetsCreateAccess").val();
                $.ajax("/savemarkers", {
                    type: "POST",
                    data: {
                        name: a,
                        password: b,
                        access: c,
                        map: dzMap.mapId,
                        newset: "Create"
                    },
                    success: function(a, b, c) {
                        a.error ? alert("Error creating set: " + a.error) : dzMap.requestSet(a.id)
                    }
                })
            });
            $("#markerSetsUpdateForm").submit(function(a) {
                a.preventDefault();
                a = $("#markerSetsUpdateId").val();
                var b = $("#markerSetsUpdateName").val(),
                    c = $("#markerSetsUpdatePassword").val(),
                    d = $("#markerSetsUpdateAccess").val();
                $.ajax("/savemarkers", {
                    type: "POST",
                    data: {
                        set: a,
                        name: b,
                        password: c,
                        access: d,
                        map: dzMap.mapId,
                        updateset: "Update"
                    },
                    success: function(a,
                        c, d) {
                        a.error ? alert("Error updating set: " + a.error) : ($("#markerSetsUpdateName").val(""), $("#markerSetsUpdatePassword").val(""), $("#markerSetsUpdateAccess").val(0), $("#markerSetsUpdateId").val(""), $("#markerSetsUpdateContainer").hide(), c = $("#userMap" + a.id), c.children().first().text(b), 2 == a.access && ($("button.btn-primary", c).detach(), $("#visibleMap" + a.id + " button.btn-primary").detach()), c = $("button[data-name]"), c.attr("data-name", a.name), c.attr("data-access", a.access))
                    }
                })
            });
            $("#markerEditForm").submit(function(a) {
                a.preventDefault();
                a = $("#markerLatInput").val();
                var b = $("#markerLngInput").val(),
                    d = $("#markerNameInput").val(),
                    f = $("#markerTypeInput").val(),
                    h = $("#markerIconInput").val(),
                    k = $("#markerBuildingInput").val();
                c && (c.info.markerId ? g[c.info.markerId] = {
                    id: c.info.markerId,
                    lat: a,
                    lng: b,
                    name: d,
                    icon: h,
                    type: f,
                    building: k
                } : q.push({
                    lat: a,
                    lng: b,
                    name: d,
                    icon: h,
                    type: f,
                    building: k
                }), c.info.editing = !0, c.info.setId = t, c.info.building = k, c.info.type = f, c.info.name = d, c.options.icon instanceof L.DivIcon ? (c.setHtml("<span>" + d + "</span>"), c.setClassName("map-label " +
                    k)) : c.setTitle(d));
                c = !1;
                e()
            });
            var b = $("#markerTypeInput"),
                d = $("#markerIconInput");
            b.change(function(e) {
                "label" == b.val() ? (d.attr("disabled", ""), c && (e = L.divIcon({
                    iconSize: null,
                    className: "map-label " + c.info.building,
                    html: "<span>" + c.info.name + "</span>"
                }), c.setIcon(e))) : (d.removeAttr("disabled"), c && (e = d.val(), c && a.markerIcons[e] && c.setIcon(new a.markerIcons[e])))
            });
            d.change(function(e) {
                c && "label" != b.val() && (e = d.val(), c && a.markerIcons[e] && c.setIcon(new a.markerIcons[e]))
            });
        });
        a.markerTypes = {
			house_free: {
                name: "unbewohntes Haus",
                icon: "haus_free",
                sized: !0
            },
			house_set: {
                name: "bewohntes Haus",
                icon: "haus_set",
            },
            label: {
                name: "Label"
            }
        };
        a.markerIcons = {
			haus_free: L.Icon.extend({
				options: {
                    iconUrl: "img/markers/house_free_low.png",
                    iconSize: [24, 24]
                }
            }),
			haus_set: L.Icon.extend({
				options: {
                    iconUrl: "img/markers/house_set_low.png",
                    iconSize: [24, 24]
                }
            })
        };
        a.zIndex = {
            label: 150,
            "default": 130
        };
        a.sizeThresholds = [-1, 7, 16];
        a.sizeNames = ["low", "med", "high"];
        a.nameSizes = {
            low: [0, 7],
            med: [8, 16],
            high: [17, 999]
        }
    };